name: Build

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'バージョン（edge または v{version}）'
        type: string
        required: true
      is_latest:
        description: '最新安定版かどうか（Prereleaseを解除してLatestにするか）'
        type: boolean
        default: false

defaults:
  run:
    shell: bash

jobs:
  # 用途に応じたバージョン文字列を生成する
  generate-version:
    permissions: {}
    uses: ./.github/workflows/_generate-version.yml
    with:
      version: ${{ github.event.inputs.version }}
      is_latest: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.is_latest == 'true' }}

  # DockerイメージをビルドしてGitHub Container Registryにデプロイする
  build-docker-ghcr:
    needs:
      - generate-version
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/_build-docker-ghcr.yml
    with:
      docker_version: ${{ needs.generate-version.outputs.docker_version }}
      app_version: ${{ needs.generate-version.outputs.app_version }}
      is_latest: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.is_latest == 'true' }}

  # DockerイメージをビルドしてDocker Hubにデプロイする
  build-docker-dockerhub:
    needs:
      - generate-version
      - build-docker-ghcr
    permissions:
      contents: read
      packages: read
    uses: ./.github/workflows/_build-docker-dockerhub.yml
    with:
      dockerhub_repository: ${{ vars.DOCKERHUB_REPOSITORY }}
      docker_version: ${{ needs.generate-version.outputs.docker_version }}
      is_latest: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.is_latest == 'true' }}
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # GitHub ReleaseをDraftとして作成する
  create-draft-release:
    needs:
      - generate-version
    if: needs.generate-version.outputs.git_version != 'edge'
    permissions:
      contents: write
    uses: ./.github/workflows/_create-draft-release.yml
    with:
      git_version: ${{ needs.generate-version.outputs.git_version }}

  # PythonパッケージをPyPIにリリースする
  release-pypi:
    needs:
      - generate-version
    if: needs.generate-version.outputs.git_version != 'edge'
    permissions:
      contents: read
      id-token: write
    uses: ./.github/workflows/_release-pypi.yml
    with:
      app_version: ${{ needs.generate-version.outputs.app_version }}

  # 実行可能ファイルをビルドしてGitHub Releaseにアップロードする
  release-binary:
    needs:
      - generate-version
      - create-draft-release
    if: needs.generate-version.outputs.git_version != 'edge'
    permissions:
      contents: write
    uses: ./.github/workflows/_release-binary.yml
    with:
      app_version: ${{ needs.generate-version.outputs.app_version }}
      git_version: ${{ needs.generate-version.outputs.git_version }}

  # GitHub ReleaseのDraftを解除して公開する
  publish-release:
    needs:
      - generate-version
      - create-draft-release
      - build-docker-ghcr
      - release-pypi
      - release-binary
    if: needs.generate-version.outputs.git_version != 'edge'
    permissions:
      contents: write
    uses: ./.github/workflows/_publish-release.yml
    with:
      git_version: ${{ needs.generate-version.outputs.git_version }}
      is_latest: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.is_latest == 'true' }}
