name: Build Docker

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'バージョン（edge または v{version}）'
        type: string
        required: true
      is_latest:
        description: '最新安定版かどうか（latestタグをプッシュするか）'
        type: boolean
        default: false

defaults:
  run:
    shell: bash

jobs:
  # Dockerイメージのバージョンとアプリケーションのバージョンを生成する
  config:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      docker_version: ${{ steps.generate-docker-version.outputs.version }}
      app_version: ${{ steps.generate-app-version.outputs.app_version }}

    steps:
      # Dockerイメージとしてのバージョンを生成
      - name: Generate Docker version
        id: generate-docker-version
        run: |
          # mainブランチにコミットがプッシュされた: edge
          # v{version}形式のタグがプッシュされた: v{version}
          # workflow_dispatchイベントでトリガーされた: inputs.version

          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            if [ "${GITHUB_REF}" = "${{ format('refs/heads/{0}', 'main') }}" ]; then
              echo "version=edge" >> "${GITHUB_OUTPUT}"

            elif [[ "${GITHUB_REF}" =~ ^refs/tags/v.+$ ]]; then
              echo "version=${GITHUB_REF#refs/tags/}" >> "${GITHUB_OUTPUT}"

            else
              echo "Unsupported ref: ${GITHUB_REF}"
              exit 1
            fi

          elif [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.version }}" = "edge" ]; then
              echo "version=edge" >> "${GITHUB_OUTPUT}"

            elif [[ "${{ inputs.version }}" =~ ^v.+$ ]]; then
              echo "version=${{ inputs.version }}" >> "${GITHUB_OUTPUT}"

            else
              echo "Invalid version format: ${{ inputs.version }}"
              exit 1
            fi

          else
            echo "Unsupported event: ${GITHUB_EVENT_NAME}"
            exit 1
          fi

      # アプリケーションとしてのバージョンを生成
      - name: Generate app version
        id: generate-app-version
        run: |
          # mainブランチにコミットがプッシュされた: 0.0.0.dev+edge.{date}.{short_sha}
          # v{version}形式のタグがプッシュされた: {version}

          DATE_STRING=$(date -u "+%Y-%m-%dT%H-%M-%SZ")
          SHA_SHORT="${GITHUB_SHA:0:7}"

          DOCKER_VERSION="${{ steps.generate-docker-version.outputs.version }}"
          if [ "${DOCKER_VERSION}" = "edge" ]; then
            APP_VERSION="0.0.0.dev+edge.${DATE_STRING}.${SHA_SHORT}"
          elif [[ "${DOCKER_VERSION}" =~ ^v.+$ ]]; then
            APP_VERSION="${DOCKER_VERSION:1}"
          else
            echo "Invalid docker version format: ${DOCKER_VERSION}"
            exit 1
          fi

          echo "app_version=${APP_VERSION}" >> "${GITHUB_OUTPUT}"

      # workflow_dispatchイベントでトリガーされた場合、リリースを作成
      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.generate-docker-version.outputs.version }}
          commit: ${{ github.sha }}
          prerelease: true
          generateReleaseNotes: true
          allowUpdates: true
          omitNameDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          omitBodyDuringUpdate: true

  # DockerイメージをビルドしてGitHub Container Registryにデプロイする
  build-docker-ghcr:
    needs: [config]
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build-docker-ghcr.yml
    with:
      docker_version: ${{ needs.config.outputs.docker_version }}
      app_version: ${{ needs.config.outputs.app_version }}
      is_latest: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.is_latest == 'true' }}
